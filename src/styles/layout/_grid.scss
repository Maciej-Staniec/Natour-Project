.row {
  max-width: $grid-width;
  margin: 0 auto;

  // The :not(selector) pseudo class selects all elements that do not match the specified selector. You can select multiple elements within the :not() pseudo-class separated by comma. These can be html elements, classes or IDs.
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
  }

  @include clearfix;
}

// The below code is an attribute selector. It targets markup elements based on what the provide inside the quotation marks. The ^ (caret) symbol tells the selector to target all instances. In our case, we want to target all classes that start with the "col-". We could use the asterix symbol * to target every selector containing the "col-" content. The $ symbol means to target all selectors that end with the "col-".
[class^="col-"] {
  float: left;

  &:not(:last-child) {
    margin-right: $gutter-horizontal-big;
    @include respond-to(tab-land-med) {
      margin-right: $gutter-horizontal-normal;
    }
    @include respond-to(tab-land-sm) {
      margin-right: $gutter-horizontal-small;
    }
  }
}

.col-1-of-2 {
  // calc() in SASS is much more powerful than in CSS as we can mix various units. In CSS we can only use 1 particular unit to perform calculations.
  width: calc((100% - $gutter-horizontal-big) / 2);
  @include respond-to(tab-land-med) {
    width: calc((100% - $gutter-horizontal-normal) / 2);
  }

  @include respond-to(tab-land-sm) {
    width: calc((100% - $gutter-horizontal-small) / 2);
  }
}

.col-1-of-3 {
  width: calc((100% - (2 * $gutter-horizontal-big)) / 3);
  @include respond-to(tab-land-med) {
    width: calc((100% - (2 * $gutter-horizontal-normal)) / 3);
  }
  @include respond-to(tab-land-sm) {
    width: calc((100% - (2 * $gutter-horizontal-small)) / 3);
  }
}

.col-1-of-4 {
  width: calc((100% - (3 * $gutter-horizontal-big)) / 4);

  @include respond-to(tab-land-med) {
    width: calc((100% - (3 * $gutter-horizontal-normal)) / 4);
  }
  // 1 row of 4 columns split into 2 rows of 2 columns
  @include respond-to(tab-land-sm) {
    width: calc((100% - (3 * $gutter-horizontal-small)) / 4);
  }
}

.col-2-of-3 {
  width: calc(
    ((100% - (2 * $gutter-horizontal-big)) / 3) * 2 + $gutter-horizontal-big
  );
  @include respond-to(tab-land-med) {
    width: calc(
      ((100% - (2 * $gutter-horizontal-big)) / 3) * 2 +
        $gutter-horizontal-normal
    );
  }

  @include respond-to(tab-land-sm) {
    width: calc(
      ((100% - (2 * $gutter-horizontal-big)) / 3) * 2 + $gutter-horizontal-small
    );
  }
}

.col-2-of-4 {
  width: calc(
    ((100% - (3 * $gutter-horizontal-big)) / 4) * 2 + $gutter-horizontal-big
  );
  @include respond-to(tab-land-med) {
    width: calc(
      ((100% - (3 * $gutter-horizontal-normal)) / 4) * 2 +
        $gutter-horizontal-normal
    );
  }

  @include respond-to(tab-land-sm) {
    width: calc(
      ((100% - (3 * $gutter-horizontal-small)) / 4) * 2 +
        $gutter-horizontal-small
    );
  }
}

.col-3-of-4 {
  width: calc(
    ((100% - (3 * $gutter-horizontal-big)) / 4) * 3 + 2 * $gutter-horizontal-big
  );
  @include respond-to(tab-land-med) {
    width: calc(
      ((100% - (3 * $gutter-horizontal-normal)) / 4) * 3 + 2 *
        $gutter-horizontal-normal
    );
  }

  @include respond-to(tab-land-sm) {
    width: calc(
      ((100% - (3 * $gutter-horizontal-small)) / 4) * 3 + 2 *
        $gutter-horizontal-small
    );
  }
}
