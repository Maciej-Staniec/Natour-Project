/* A cross-browser reset, often referred to as a CSS reset or a CSS normalization, is a technique used to reset or normalize default browser styling to create a consistent starting point for styling elements across different web browsers.

Different browsers have their default styles for various HTML elements. This can lead to inconsistencies in appearance and layout between browsers. A CSS reset aims to neutralize these default styles, removing browser-specific styling differences, and providing a consistent baseline styling for your webpage across different browsers. */

/* Reset margins and paddings for all elements */
* {
  /* Each html element has default margin and padding. We want to provide consistency across all browsers so we set their value to 0. */
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* Optional: Include border and padding in the element's total width and height */
}

html {
  font-size: 62.5%;
}

/* When it comes to fonts, we want to default their settings in the body element as it gives us a powerful inheritance property. */

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  /* 1.7 Line height means that the line height is 1.7x times bigger than the default value. */
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
  /* This property sets the height of the HTML element to 95% of the current viewport. Monitors vary in size, so this property resizes the elements based on the maximum height of the view port. */
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(128, 214, 113, 0.8),
      rgba(39, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  /* Set the image to cover the whole width of the viewport */
  background-size: cover;
  /* Setting up the image position to top makes it stay at the the middle part of the screen when we use a device with a different viewport size.*/
  background-position: top;
  /* syntax: (x y(first point), x y (2nd point), x y (3rd point), x y (4th point) */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clip-path: polygon(0% 100%, 50% 0, 100% 100%); */
  position: relative;
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  /* We don't need to specify the width property. A browser will figure it out. */
  height: 35px;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
}

.heading-primary-main {
  display: block;
  font-size: 6.2rem;
  letter-spacing: 3.6rem;
  font-weight: 400;

  animation-name: MoveInLeft;
  animation-duration: 3s;
}

.heading-primary-sub {
  display: block;
  font-size: 2rem;
  letter-spacing: 1.75rem;
  font-weight: 700;
}

@keyframes MoveInLeft {
  /* Start of the animation */
  0% {
    opacity: 0;
    /* We want the header to fade in from the left */
    transform: translateX(-100px);
  }

  /* Finish of the animation */
  100% {
    opacity: 1;
    /* And we want it to stop at its current position (-50%) */
    transform: translate(0);
  }
}
