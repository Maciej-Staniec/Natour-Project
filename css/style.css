/* A cross-browser reset, often referred to as a CSS reset or a CSS normalization, is a technique used to reset or normalize default browser styling to create a consistent starting point for styling elements across different web browsers.

Different browsers have their default styles for various HTML elements. This can lead to inconsistencies in appearance and layout between browsers. A CSS reset aims to neutralize these default styles, removing browser-specific styling differences, and providing a consistent baseline styling for your webpage across different browsers. */

/* Reset margins and paddings for all elements */
* {
  /* Each html element has default margin and padding. We want to provide consistency across all browsers so we set their value to 0. */
  margin: 0;
  padding: 0;
  box-sizing: border-box; /* Optional: Include border and padding in the element's total width and height */
}

html {
  font-size: 62.5%;
}

/* When it comes to fonts, we want to default their settings in the body element as it gives us a powerful inheritance property. */

body {
  font-family: "Lato", sans-serif;
  font-weight: 400;
  font-size: 16px;
  /* 1.7 Line height means that the line height is 1.7x times bigger than the default value. */
  line-height: 1.7;
  color: #777;
  padding: 30px;
}

.header {
  /* This property sets the height of the HTML element to 95% of the current viewport. Monitors vary in size, so this property resizes the elements based on the maximum height of the view port. */
  height: 95vh;
  background-image: linear-gradient(
      to right bottom,
      rgba(128, 214, 113, 0.8),
      rgba(39, 180, 133, 0.8)
    ),
    url(../img/hero.jpg);
  /* Set the image to cover the whole width of the viewport */
  background-size: cover;
  /* Setting up the image position to top makes it stay at the the middle part of the screen when we use a device with a different viewport size.*/
  background-position: top;
  /* syntax: (x y(first point), x y (2nd point), x y (3rd point), x y (4th point) */
  clip-path: polygon(0 0, 100% 0, 100% 75vh, 0 100%);
  /* clip-path: polygon(0% 100%, 50% 0, 100% 100%); */
  position: relative;
}

.logo-box {
  position: absolute;
  top: 40px;
  left: 40px;
}

.logo {
  /* We don't need to specify the width property. Browsers will figure it out. */
  height: 35px;
  backface-visibility: hidden;
}

/* Apply animation on hover */
.logo:hover {
  animation: enlarge 1s ease-in-out;
}

.text-box {
  position: absolute;
  top: 40%;
  left: 50%;
  transform: translate(-50%, -50%);
  /* Anchor tags - "a" elements are treated as text. Therefore, setting the text-align property works for them. */
  text-align: center;
}

.heading-primary {
  color: #fff;
  text-transform: uppercase;
  /* To stop web browsers from moving the html element to the top at the end of the animation (shaking issue) we need to use the backface-visibility property and set its value to hidden*/
  backface-visibility: hidden;
  margin-bottom: 6.4rem;
}

.heading-primary-main {
  display: block;
  font-size: 6.2rem;
  letter-spacing: 3.6rem;
  font-weight: 400;

  animation-name: MoveInLeft;
  animation-duration: 1s;
  /* animation-delay: 3s; */
  /* animation-iteration-count: 3; */
  animation-timing-function: ease-out;
}

.heading-primary-sub {
  display: block;
  font-size: 2rem;
  letter-spacing: 1.75rem;
  font-weight: 700;

  /* Let's use a CSS property, which contain all the necessary animation properties to shorten our code. */
  animation: MoveInRight 1s ease-out;
}

@keyframes MoveInLeft {
  /* Start of the animation */
  0% {
    opacity: 0;
    /* We want the header to fade in from the left */
    transform: translateX(-100px);
  }

  80% {
    transform: translateX(10px);
  }

  /* Finish of the animation */
  100% {
    opacity: 1;
    /* And we want it to stop at its current position (-50% on the element's X axis) */
    transform: translateX(0);
  }
}

@keyframes MoveInRight {
  /* Start of the animation */
  0% {
    opacity: 0;
    /* We want the header to fade in from the right */
    transform: translateX(100px);
  }

  /* 60% {
    transform:rotate(-20deg)
  } */

  80% {
    transform: translateX(-10px);
  }

  /* Finish of the animation */
  100% {
    opacity: 1;
    /* And we want it to stop at its current position (-50% on the element's X axis) */
    transform: translateX(0);
  }
}

@keyframes enlarge {
  0% {
    transform: scale(1); /* Initial scale */
  }

  50% {
    transform: scale(1.2); /* Scale to 120% */
  }

  100% {
    transform: scale(1); /* Back to initial scale */
  }
}

/* We use pseudoclasses to style elements under certain conditions */
/* The :link pseudo-class in CSS targets links (anchor elements <a>) that have not been visited or clicked by the user. It defines the style of unvisited links on a webpage. */
.btn:link,
/* the visited pseudo class targets links that have already been visited or clicked by the user.*/
.btn:visited {
  padding: 1.6rem 4.8rem;
  text-decoration: none;
  border: none;
  /* cursor: pointer; */
  border-radius: 10rem;
  text-transform: uppercase;
  /* Using display: inline-block; for the buttons allows them to sit next to each other horizontally in the same line while applying margin between them to create spacing. It also accepts block-level properties such as setting width, height, padding, and margins.*/
  display: inline-block;

  /* How transition: all Works:
  Applies Transition to All Properties: It sets a transition effect for all properties that can be transitioned (e.g., width, height, color, background, etc.) within the specified element.
  Uniform Transition for All Changes: When any of these properties change (due to a CSS change, hover effect, class change, etc.), the transition effect defined by transition: all will be applied uniformly to those changes. */
  /* Syntax:  transition: all <duration> <timing-function> <delay>; */
  transition: all 0.2s ease;

  /* Timing functions
  A timing function in CSS is used to define the pace or speed curve of a transition or animation between two states of an element. It determines how the intermediate values of a transition are calculated over time, affecting the acceleration and deceleration of the animation.

  Common Timing Functions:
  1. Ease (default):
  ease: Starts slow, accelerates, then slows down toward the end of the transition. It's commonly used and provides a smooth and natural transition.
  2. Linear:
  linear: Progresses at a constant speed throughout the transition, without acceleration or deceleration. The change occurs at a constant rate.
  3. Ease-in, Ease-out Variations:
  ease-in: Starts the transition slowly and accelerates as it progresses.
  ease-out: Begins the transition at full speed and decelerates as it finishes.
  ease-in-out: Combines ease-in and ease-out, starting and ending the transition slowly with an acceleration in the middle.
  */
  position: relative;
}
/* :hover: Applies styles when the mouse pointer is over the link. */
.btn:hover {
  transform: translateY(-3px);
  /* 
  The box-shadow CSS property adds a shadow effect to an element. It creates a shadow around the border-box of an element, allowing you to create depth and dimensionality in your designs. 

  Syntax:
  box-shadow: h-offset v-offset blur spread color inset;

  - h-offset: Horizontal offset of the shadow. Positive values move the shadow right, negative values move it left.
  - v-offset: Vertical offset of the shadow. Positive values move the shadow down, negative values move it up.
  - blur: Optional parameter that specifies the blur radius. Larger values create a more blurred shadow.
  - spread: Optional parameter that specifies the spread radius. Positive - values expand the shadow, negative values shrink it.
  - color: Color of the shadow. Can be a keyword, hex, RGB, or RGBA value.
  - inset: Optional keyword that creates an inner shadow if specified.
  */
  box-shadow: 0 5px 20px rgba(0, 0, 0, 0.3);
}

/* :active: Applies styles when the link is being activated (usually when it's being clicked). */
.btn:active {
  transform: translateY(-1px);
  box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);
}

.btn-white {
  background-color: white;
  color: #777;
}

/* 
************** Pseudo elements **************

Pseudo-elements in CSS allow you to style specific parts of an HTML element without adding extra HTML markup code. They target certain parts of an element's content or structure, enabling you to apply styles to those parts. Pseudo-elements are powerful tools to enhance the presentation and styling of specific parts of an element's content or structure without modifying the HTML structure itself.

Common Pseudo-elements:
::before: Adds content before the selected element's content.
::after: Adds content after the selected element's content.
::first-line: Styles the first line of text within an element.
::first-letter: Styles the first letter of text within an element.
::selection: Styles the portion of text selected by the user.

Pseudo-elements use double colons (::) in modern CSS to distinguish them from pseudo-classes (e.g., :hover, :focus). However, for compatibility reasons, single colons (:) are still supported in some older browsers.

 */

.btn::after {
  /* By default, pseudo-elements are empty and have no content. Adding content allows you to define what appears in these pseudo-elements. If the content property is not used, the pseudo-element won't generate any content and may not be visible. Content property must be declared, even if it is empty.*/
  content: "";
  /* We want the pseudo element look exactly the same as the button. Therefore, we want to specify its properties like height and width to be the same. Therefore, we need to set their values to 100% (100% of the parent element). It works, because pseudo element is treated like a child element of the parent element (button).*/
  display: inline-block;
  height: 100%;
  width: 100%;
  border-radius: 100px;
  position: absolute;
  top: 0;
  left: 0;
  z-index: -1;
  transition: all 0.4s;
}

/* We also want to specify the colour of the pseudo element to be white, but this needs to be applied to .btn-white class. */
.btn-white::after {
  content: "";
  background-color: white;
}

/* We want to see the advanced animation only if we hover over the button */
.btn:hover::after {
  transform: scaleX(1.4) scaleY(1.6);
  opacity: 0;
}

@keyframes MoveInButton {
  0% {
    opacity: 0;
    transform: translateY(100px);
  }

  100% {
    opacity: 1;
  }
}

.btn-animated {
  /* Syntax of the animation property
  animation: name duration timing-function delay iteration-count direction fill-mode play-state;

  - name: Specifies the name of the @keyframes rule that defines the animation.
  - duration: Specifies how long the animation will take to complete (e.g., 1s, 500ms).
  - timing-function: Defines the speed curve or pacing of the animation (e.g., ease, linear, ease-in-out, cubic-bezier()).
  - delay: Specifies a delay before the animation starts (e.g., 0s, 1s).
  - iteration-count: Defines the number of times the animation will run (infinite or a numeric value).
  - direction: Specifies whether the animation plays forward, backward, or alternates (e.g., normal, reverse, alternate).
  - fill-mode: Controls the styles applied to the element before and after the animation (e.g., forwards, backwards, both).
  - play-state: Specifies whether the animation is running or paused (e.g., running, paused).
 */
  animation: MoveInButton 0.5s ease-out 0.75s;
  /* animation fill mode set to backwards applies the 0% animation declaration to our button before the animation happens. Therefore, we don't have to explicitly apply these styles to the button which prevents confusion. */
  animation-fill-mode: backwards;
}
